{"/auth/rest":{"title":"REST Endpoints","data":{"":"","introduction#Introduction":"It's recommended to use one of the client libraries, but if for some reason you can't use them, TurboCore provides a REST API for authentication. You can use this API to sign up, sign in, and log out users. You can also use this API to get a user's information and refresh their JWT token.\nEndpoints that require authentication will be marked with a üîí. See Using the REST API for more information.","get-apiauthuser-#GET /api/auth/user üîí":"You can get a user's information by sending a GET request to the /api/auth/user endpoint.Method: GETEndpoint: /api/auth/get-userRequest Body: NoneResponse Body:\nProperty Name\tType\tDescription\tuid\tstring\tThe UID of the user\temail\tstring\tThe email of the user\temail_verified\tboolean\tWhether the user's email is verified\tmetadata\tobject\tA JSON object containing any additional metadata you want to store with the user\nExample response:\n{\n\"uid\": \"710f7e29-4082-4421-b9b5-49f56a393832\",\n\"email\": \"mail@example.com\",\n\"email_verified\": true,\n\"metadata\": {\n\"role\": \"admin\",\n\"name\": \"John Doe\",\n\"age\": 21\n}\n}\nCommon Errors:\nNOT_AUTHENTICATED: The user is not signed in\nUSER_NOT_FOUND: The user was not found","post-apiauthuserlogin#POST /api/auth/user/login":"You can sign in a user by sending a POST request to the /api/auth/user/login endpoint.Method: POSTEndpoint: /api/auth/user/loginRequest Body:\nProperty Name\tType\tDescription\temail\tstring\tThe email of the user\tpassword\tstring\tThe password of the user\nResponse Body:\nProperty Name\tType\tDescription\tuid\tstring\tThe UID of the requested user\ttoken\tstring\tThe JWT token of requested the user\texpiry\tstring\tThe date the token expires in UNIX epoch time\trefreshToken\tstring\tA token used to get a new JWT token from TurboCore\temailVerified\tboolean\tWhether the user's email has been verified\tmetadata\tobject\tA JSON object containing any additional metadata you want to store with the user\nExample response:\n{\n\"uid\": \"710f7e29-4082-4421-b9b5-49f56a393832\",\n\"token\": \"[JWT TOKEN]]\",\n\"expiry\": 1633040000,\n\"refreshToken\": \"c1d2e3f4g5h6i7j8k9l0.c1d2e3f4g5h6i7j8k9l0.c1d2e3f4g5h6i7j8k9l0\",\n\"emailVerified\": true,\n\"metadata\": {\n\"role\": \"admin\",\n\"name\": \"John Doe\",\n\"age\": 21\n}\n}\nCommon Errors:\nINVALID_CREDENTIALS: The email or password is invalid\nUSER_DISABLED: The user has been disabled by an administrator","post-apiauthusercreate#POST /api/auth/user/create":"You can create a user by sending a POST request to the /api/auth/user/create endpoint.Method: POSTEndpoint: /api/auth/user/createRequest Body:\nProperty Name\tType\tDescription\temail\tstring\tThe email of the user\tpassword\tstring\tThe password of the user\tlogin\tboolean\tWhether to login the user after signing up\temailVerified\tboolean\tWhether the user's email has been verified\tmetadata\tobject\tA JSON object containing any additional metadata you want to store with the user\nResponse Body:\nProperty Name\tType\tDescription\tuid\tstring\tThe UID of the requested user\ttoken\tstring | null\tThe JWT token of requested the user\texpiry\tstring | null\tThe date the token expires in UNIX epoch time\trefreshToken\tstring | null\tA token used to get a new JWT token from TurboCore\temailVerified\tboolean\tWhether the user's email has been verified\tmetadata\tobject\tA JSON object containing any additional metadata you want to store with the user\nExample Response: Same response as the login endpoint.Common Errors:\nEMAIL_ALREADY_IN_USE: The email is already in use\nINVALID_EMAIL: The email is invalid\nWEAK_PASSWORD: The password is too weak","post-apiauthuserrefresh#POST /api/auth/user/refresh":"You can refresh a user's JWT token by sending a POST request to the /api/auth/user/refresh endpoint.Method: POSTEndpoint: /api/auth/user/refreshRequest Body:\nProperty Name\tType\tDescription\trefreshToken\tstring\tThe refresh token of the user\nResponse Body:\nProperty Name\tType\tDescription\tuid\tstring\tThe UID of the requested user\ttoken\tstring\tThe JWT token of requested the user\texpiry\tstring\tThe date the token expires in UNIX epoch time\trefreshToken\tstring\tA token used to get a new JWT token from TurboCore\nExample Response:\n{\n\"uid\": \"710f7e29-4082-4421-b9b5-49f56a393832\",\n\"token\": \"[JWT TOKEN]]\",\n\"expiry\": 1633040000,\n\"refreshToken\": \"c1d2e3f4g5h6i7j8k9l0.c1d2e3f4g5h6i7j8k9l0.c1d2e3f4g5h6i7j8k9l0\"\n}\nCommon Errors:\nINVALID_REFRESH_TOKEN: The refresh token is invalid","post-apiauthuserlogout-#POST /api/auth/user/logout üîí":"You can sign out a user by sending a POST request to the /api/auth/user/logout endpoint.Method: POSTEndpoint: /api/auth/user/logoutRequest Body: NoneResponse Body: NoneCommon Errors:\nNOT_AUTHENTICATED: The user is not signed in","post-apiauthmagic-link#POST /api/auth/magic-link":"You can send a magic link to a user by sending a POST request to the /api/auth/magic-link endpoint. The user will be redirected to the URL specified in the continueUrl parameter after they sign in.Method: POSTEndpoint: /api/auth/magic-linkRequest Body:\nProperty Name\tType\tDescription\temail\tstring\tThe email of the user\tcontinueUrl\tstring\tThe URL to redirect the user to after they sign in\nResponse Body: NoneContinue URL Parameters:\nProperty Name\tType\tDescription\tuid\tstring\tThe UID of the user\ttoken\tstring\tThe JWT token of the user\texpiry\tstring\tThe date the token expires in UNIX epoch time\trefreshToken\tstring\tA token used to get a new JWT token from TurboCore\nCommon Errors:\nINVALID_EMAIL: The email is invalid\nUSER_NOT_FOUND: The user was not found\n‚ö†Ô∏è","post-apiauthuserverify-email-#POST /api/auth/user/verify-email üîí":"You can verify a user's email by sending a POST request to the /api/auth/user/verify-email endpoint. This will send a verification email to the user's email address.Method: POSTEndpoint: /api/auth/user/verify-emailRequest Body: NoneResponse Body: NoneCommon Errors:\nNOT_AUTHENTICATED: The user is not signed in\nEMAIL_ALREADY_VERIFIED: The user's email is already verified\nINVALID_EMAIL: The email is invalid\nUSER_NOT_FOUND: The user was not found","patch-apiauthuserchange-password-#PATCH /api/auth/user/change-password üîí":"You can change a user's password by sending a PATCH request to the /api/auth/user/change-password endpoint.Method: PATCHEndpoint: /api/auth/user/change-passwordRequest Body:\nProperty Name\tType\tDescription\tuid\tstring\tThe UID of the user\toldPassword\tstring\tThe old password of the user\tnewPassword\tstring\tThe new password of the user\nResponse Body: NoneCommon Errors:\nNOT_AUTHENTICATED: The user is not signed in\nINVALID_PASSWORD: The old password is invalid\nWEAK_PASSWORD: The new password is too weak","post-apiauthreset-password#POST /api/auth/reset-password":"You can reset a user's password by sending a POST request to the /api/auth/reset-password endpoint. This will send a password reset email to the user's email address. For security, this endpoint does not return an error if the email is not found.Method: POSTEndpoint: /api/auth/reset-passwordRequest Body:\nProperty Name\tType\tDescription\temail\tstring\tThe email of the user\nResponse Body: None","put-apiauthuser-#PUT /api/auth/user üîí":"You can update a user's email or metadata by sending a PUT request to the /api/auth/user endpoint.Method: PUTEndpoint: /api/auth/userRequest Body:\nProperty Name\tType\tDescription\temail\tstring\tThe new email of the user\tmetadata\tobject\tA JSON object containing any additional metadata you want to store with the user\nResponse Body: NoneCommon Errors:\nNOT_AUTHENTICATED: The user is not signed in\nEMAIL_ALREADY_IN_USE: The email is already in use\nINVALID_EMAIL: The email is invalid","delete-apiauthuser-#DELETE /api/auth/user üîí":"You can delete a user by sending a DELETE request to the /api/auth/user endpoint.Method: DELETEEndpoint: /api/auth/userRequest Body: NoneResponse Body: NoneCommon Errors:\nNOT_AUTHENTICATED: The user is not signed in\nUSER_NOT_FOUND: The user was not found"}},"/using-the-api":{"title":"Using the REST API","data":{"":"It's possible to use the REST API for interacting with TurboCore, but it's recommended that you use one of the client libraries instead.","authentication#Authentication":"Most endpoints require that you pass a JWT in the Authorization header. Endpoints that require authentication will be marked with a üîí. The JWT should be passed as a Bearer token. Here is an example of how to pass a JWT in a GET request:\ncurl -X GET \\\nhttps://[DOMAIN]/api/auth/user \\\n-H 'Authorization: Bearer <JWT>'\nYou can get a JWT by making a POST request to /api/auth/login as described in Authentication.","handling-errors#Handling Errors":"The REST API will return a 200 OK response for successful requests, and a 400 Bad Request response for requests that fail. Successful\nrequests will return a JSON body with the response data, and failed requests will return a JSON body with an error code and human readable\nmessage. Here is an example of a failed authentication request:\n{\n\"code\": \"INVALID_CREDENTIALS\",\n\"message\": \"The email or password is incorrect.\"\n}\n\nYou should always check the HTTP status code of the response to determine how to handle the response.","admin-endpoints#Admin Endpoints":"The REST API has a few endpoints that should only be used on the server side and never on the client. These endpoints are prefixed with /api/admin/. All of these endpoints require an admin token to be passed in the Authorization header.\nWarning: Using these endpoints on the client side gives anyone who has access to your client code the ability to perform any action on your TurboCore instance. This includes creating, updating, and deleting any user, and creating, updating, and deleting any data."}}}